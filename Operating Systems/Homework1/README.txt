Λειτουργικά Συστήματα Εργασία 1
Ιωάννης Τασσόπουλος Α.Μ.: 1115201500155
Στο πρόγραμμα αρχίκα γίνεται έλεχνος τον arguments από το command line. Το πρόγραμμα καλείται με
./ReadersWriters -p x -i x -i e x -r x 
To -p είναι το πόσα processes θα γίνουν, το -i το πόσα iterations θα γίνουν, το -e είναι το πόσα
entries θα έχει η διαμοιραζόμενη μνήμη και το -r ουσιαστικά είναι το ratio των readers/writers π.χ.
αν δώσουμε στο -r την τιμη 4 εννοούμε ότι στους 4 ο ένας είναι writer.
Στη συνέχεια καλώ την Initialization(); όπου κάνει Create και Initialize την μνήμη και τους σημαφόρους
(δημιουργώ έναν για κάθε entry) και αρχικοποιώ τα entries της μνήμης.
Μετά μέσα σε ενα for() καλείτε η fork() ώστε να αρχίσουν τα processes. Τα παιδία της fork() καλούν την 
Peer( int peer_id), όπου παίρνει σαν όρισμα το i από την for() ώστε στο printf() να δείξουμε για πιο process
μιλάμε( επέλεξα να το κάνω με το i αντί για το getpid() για λόγους ομορφιάς). Η Peer μόλις ξεκινά 
αρχικοποιεί τα reads( που είναι ποσους readers δημιούργησε), τα writes( αντίστοιχα), και τους χρόνους για 
readers και writers, μετά μέσα σε ενα for() γίνεται ενα if που καθορίζει αν θα ειναι writers ή reader αυτό
το interation. Αν είναι reader καλείτε η Reader(float *turnAroundTime) παίρνει σαν όρισμα τον 
χρόνο για να ξέρει πόσο θα περίμενε. H Reader αρχικά δίνει στην time1 την ώρα που άρχισε, μέτα κάνει wait 
για το mutex των readers, αν είναι ο πρώτος reader τότε κάνει wait το mutex και των writers στην συνέχεια
κανει signal το mutex των readers για να μπορούν να μπουν, μέτα δίνει τιμή στο time2 ( ώστε να κάνουμε την
αφαίρεση time2 - time1 για να δούμε πόσο χρόνο περίμενε) μετά κανει τα reads++ και περίμενει έναν χρόνο.
Στη συνέχεια, κανει wait το mutex των readers για να γράψει ότι βγήκε αν ειναι ο τελευταίος τότε κάνει 
singal το mutex των writers για να μπορουν να μπουν και μετά κανει singal το mutex των readers για να 
μπορουν να μπουν. Τέλος επιστρέφει τον χρόνο που περίμενε.
Aν το iteration ειναι writer τότε καλείται η Writer όπου και αυτή αντίστοιχα έχει τα time για να μετρήσει 
πόσο χρόνο περιμένει. Αρχικά κάνει wait για το mutex μετά μπαίνει μέσα ανεβάζει τα writes++ και μετά το
κάνει signal για να μπορούν να μπούν και οι άλλοι.
Στο τέλος η Peer κάνει printf() τα στατιστικά που έχει, δηλαδη πόσοι writers και readers εγιναν και πόσο 
χρόνο περίμεναν.
Στη συνέχεια το πρόγραμμα μετράει τα entries στο ποσα reads και writes εγιναν συνολικά και κάνει το ανάλογο
print
Τελος αποδεσμεύω την μνήμη και τους σημαφόρους.
 
